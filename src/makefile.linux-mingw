# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

TARGET_PLATFORM:=i686
#TARGET_PLATFORM:=x86_64

DEPSDIR:=/usr/$(TARGET_PLATFORM)-w64-mingw32
CC:=/usr/bin/$(TARGET_PLATFORM)-w64-mingw32-gcc
CXX:=/usr/bin/$(TARGET_PLATFORM)-w64-mingw32-g++
RANLIB=/usr/bin/$(TARGET_PLATFORM)-w64-mingw32-ranlib
STRIP=/usr/bin/$(TARGET_PLATFORM)-w64-mingw32-strip

USE_UPNP:=0
USE_WALLET:=1

LIBPATHS= \
 -L"$(DEPSDIR)/boost_1_58_0/stage/lib" \
 -L"$(DEPSDIR)/db-6.1.26/build_unix" \
 -L"$(DEPSDIR)/openssl-1.0.1m"

LIBS += \
 -l boost_system-mt \
 -l boost_filesystem-mt \
 -l boost_program_options-mt \
 -l boost_thread_win32-mt \
 -l boost_chrono-mt \
 -l db_cxx \
 -l ssl \
 -l crypto \
 -l z

DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE
DEBUGFLAGS=-g

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBPATHS += -L"$(DEPSDIR)/miniupnpc"
	LIBS += -l miniupnpc -l iphlpapi
	DEFS += -DMINIUPNP_STATICLIB -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)

ifeq (${ARCH}, i686)
    EXT_OPTIONS=-msse2
endif

CFLAGS=-O2 -std=gnu++11 $(EXT_OPTIONS) -w -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -static-libgcc -static-libstdc++

LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/init.o \
    obj/vanillacashd.o \
    obj/keystore.o \
    obj/core.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/rpcclient.o \
    obj/rpcprotocol.o \
    obj/rpcserver.o \
    obj/rpcmisc.o \
    obj/rpcnet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/timedata.o \
    obj/script.o \
    obj/sync.o \
    obj/txmempool.o \
    obj/util.o \
    obj/hash.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/chainparams.o \
    obj/crypto/blake.o\
    obj/crypto/bmw.o\
    obj/crypto/groestl.o\
    obj/crypto/jh.o\
    obj/crypto/keccak.o\
    obj/crypto/skein.o\
    obj/crypto/cubehash.o \
    obj/crypto/luffa.o \
    obj/crypto/aes_helper.o \
    obj/crypto/echo.o \
    obj/crypto/shavite.o \
    obj/crypto/simd.o \
    obj/crypto/hamsi.o \
    obj/crypto/fugue.o \
    obj/crypto/shabal.o \
    obj/crypto/whirlpool.o \
    obj/crypto/haval.o \
    obj/crypto/sha2big.o

ifeq (${USE_WALLET}, 1)
    DEFS += -DENABLE_WALLET
    OBJS += \
        obj/db.o \
        obj/miner.o \
        obj/rpcdump.o \
        obj/rpcmining.o \
        obj/rpcwallet.o \
        obj/wallet.o \
        obj/walletdb.o
endif

all: vanillacashd.exe

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += -I"$(CURDIR)/leveldb/include"
DEFS += -I"$(CURDIR)/leveldb/helpers"
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb && CC=$(CC) CXX=$(CXX) TARGET_OS=OS_WINDOWS_CROSSCOMPILE CXXFLAGS="-I$(INCLUDEPATHS)" LDFLAGS="-L$(LIBPATHS)" $(MAKE) libleveldb.a libmemenv.a; $(RANLIB) libleveldb.a; $(RANLIB) libmemenv.a; cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h

version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<

obj/%.o: %.c $(HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

vanillacashd.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -lshlwapi
	$(STRIP) vanillacashd.exe
clean:
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/*.d
	-rm -f obj/crypto/*.o
	-rm -f obj/crypto/*.P
	-rm -f obj/crypto/*.d
	-rm -f vanillacashd.exe
	-rm -f obj/build.h
	cd leveldb && make clean && cd ..

FORCE:
